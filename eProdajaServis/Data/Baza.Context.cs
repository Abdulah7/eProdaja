//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eProdajaServis.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AutoSalonEntities : DbContext
    {
        public AutoSalonEntities()
            : base("name=AutoSalonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Dijelovi> Dijelovi { get; set; }
        public DbSet<Korisnici> Korisnici { get; set; }
        public DbSet<Kupci> Kupci { get; set; }
        public DbSet<Kvarovi> Kvarovi { get; set; }
        public DbSet<Modeli> Modeli { get; set; }
        public DbSet<NaciniPlacanja> NaciniPlacanja { get; set; }
        public DbSet<Pitanja> Pitanja { get; set; }
        public DbSet<Proizvodjaci> Proizvodjaci { get; set; }
        public DbSet<Racuni> Racuni { get; set; }
        public DbSet<RacuniStavke> RacuniStavke { get; set; }
        public DbSet<SalonAuta> SalonAuta { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Vozila> Vozila { get; set; }
        public DbSet<Notifikacija> Notifikacija { get; set; }
    
        public virtual ObjectResult<ALLCars_Result1> ALLCars(string ime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ALLCars_Result1>("ALLCars", imeParameter);
        }
    
        public virtual int BrisanjeAuta(Nullable<int> autoId)
        {
            var autoIdParameter = autoId.HasValue ?
                new ObjectParameter("autoId", autoId) :
                new ObjectParameter("autoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BrisanjeAuta", autoIdParameter);
        }
    
        public virtual int DeleteKupac(Nullable<int> kupacId)
        {
            var kupacIdParameter = kupacId.HasValue ?
                new ObjectParameter("KupacId", kupacId) :
                new ObjectParameter("KupacId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKupac", kupacIdParameter);
        }
    
        public virtual ObjectResult<DijeloviAllGet_Result> DijeloviAllGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DijeloviAllGet_Result>("DijeloviAllGet");
        }
    
        public virtual int DijeloviDelete(Nullable<int> dijeloviID)
        {
            var dijeloviIDParameter = dijeloviID.HasValue ?
                new ObjectParameter("dijeloviID", dijeloviID) :
                new ObjectParameter("dijeloviID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DijeloviDelete", dijeloviIDParameter);
        }
    
        public virtual ObjectResult<Dijelovi> DijeloviSearch(string naziv, string sifra)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("sifra", sifra) :
                new ObjectParameter("sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("DijeloviSearch", nazivParameter, sifraParameter);
        }
    
        public virtual ObjectResult<Dijelovi> DijeloviSearch(string naziv, string sifra, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("sifra", sifra) :
                new ObjectParameter("sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("DijeloviSearch", mergeOption, nazivParameter, sifraParameter);
        }
    
        public virtual ObjectResult<GETALLDijelove_Result> GETALLDijelove()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETALLDijelove_Result>("GETALLDijelove");
        }
    
        public virtual int GETDIJELOVE(string naziv, Nullable<int> offset, Nullable<int> maxRows, ObjectParameter totalRows)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETDIJELOVE", nazivParameter, offsetParameter, maxRowsParameter, totalRows);
        }
    
        public virtual ObjectResult<Dijelovi> GETDijeloviID(Nullable<int> dioID)
        {
            var dioIDParameter = dioID.HasValue ?
                new ObjectParameter("dioID", dioID) :
                new ObjectParameter("dioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("GETDijeloviID", dioIDParameter);
        }
    
        public virtual ObjectResult<Dijelovi> GETDijeloviID(Nullable<int> dioID, MergeOption mergeOption)
        {
            var dioIDParameter = dioID.HasValue ?
                new ObjectParameter("dioID", dioID) :
                new ObjectParameter("dioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("GETDijeloviID", mergeOption, dioIDParameter);
        }
    
        public virtual ObjectResult<GETProdajaInfo_Result> GETProdajaInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETProdajaInfo_Result>("GETProdajaInfo");
        }
    
        public virtual ObjectResult<GEtALLAuta_Result6> GEtALLAuta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GEtALLAuta_Result6>("GEtALLAuta");
        }
    
        public virtual int GEtNarudzbaID(Nullable<int> idnarudzba)
        {
            var idnarudzbaParameter = idnarudzba.HasValue ?
                new ObjectParameter("Idnarudzba", idnarudzba) :
                new ObjectParameter("Idnarudzba", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GEtNarudzbaID", idnarudzbaParameter);
        }
    
        public virtual ObjectResult<GEtNazivAutaALL_Result2> GEtNazivAutaALL(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GEtNazivAutaALL_Result2>("GEtNazivAutaALL", nazivParameter);
        }
    
        public virtual ObjectResult<GEtNazivDijelovaALl_Result6> GEtNazivDijelovaALl(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GEtNazivDijelovaALl_Result6>("GEtNazivDijelovaALl", nazivParameter);
        }
    
        public virtual int GetAllStavke()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllStavke");
        }
    
        public virtual ObjectResult<GetInfo_Result2> GetInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInfo_Result2>("GetInfo");
        }
    
        public virtual ObjectResult<GetInfoUkupno_Result> GetInfoUkupno()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInfoUkupno_Result>("GetInfoUkupno");
        }
    
        public virtual ObjectResult<Kupci> GetKupacIME(string ime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("GetKupacIME", imeParameter);
        }
    
        public virtual ObjectResult<Kupci> GetKupacIME(string ime, MergeOption mergeOption)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("GetKupacIME", mergeOption, imeParameter);
        }
    
        public virtual ObjectResult<Vozila> GetVoziloID(Nullable<int> voziloID)
        {
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVoziloID", voziloIDParameter);
        }
    
        public virtual ObjectResult<Vozila> GetVoziloID(Nullable<int> voziloID, MergeOption mergeOption)
        {
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVoziloID", mergeOption, voziloIDParameter);
        }
    
        public virtual int InsertDijelove(string naziv, Nullable<int> zalihe, Nullable<double> cijena, string sifra, Nullable<int> proizvodjacid, string autaproiz, string opis)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var zaliheParameter = zalihe.HasValue ?
                new ObjectParameter("zalihe", zalihe) :
                new ObjectParameter("zalihe", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("cijena", cijena) :
                new ObjectParameter("cijena", typeof(double));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("sifra", sifra) :
                new ObjectParameter("sifra", typeof(string));
    
            var proizvodjacidParameter = proizvodjacid.HasValue ?
                new ObjectParameter("proizvodjacid", proizvodjacid) :
                new ObjectParameter("proizvodjacid", typeof(int));
    
            var autaproizParameter = autaproiz != null ?
                new ObjectParameter("autaproiz", autaproiz) :
                new ObjectParameter("autaproiz", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("opis", opis) :
                new ObjectParameter("opis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDijelove", nazivParameter, zaliheParameter, cijenaParameter, sifraParameter, proizvodjacidParameter, autaproizParameter, opisParameter);
        }
    
        public virtual int InsertModel(Nullable<int> proizovjdac, string naziv, string tip)
        {
            var proizovjdacParameter = proizovjdac.HasValue ?
                new ObjectParameter("proizovjdac", proizovjdac) :
                new ObjectParameter("proizovjdac", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var tipParameter = tip != null ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertModel", proizovjdacParameter, nazivParameter, tipParameter);
        }
    
        public virtual int InsertProizvodjac(string naziv, string adresa, string telefon, string email)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProizvodjac", nazivParameter, adresaParameter, telefonParameter, emailParameter);
        }
    
        public virtual int InsertRacun(Nullable<int> servisid, Nullable<double> cijena, string komenatar, Nullable<double> pdv, Nullable<double> ukupno, string nacinisporuke, Nullable<System.DateTime> datumFa, Nullable<System.DateTime> datumI, Nullable<int> placanje, Nullable<int> kupacid)
        {
            var servisidParameter = servisid.HasValue ?
                new ObjectParameter("servisid", servisid) :
                new ObjectParameter("servisid", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("cijena", cijena) :
                new ObjectParameter("cijena", typeof(double));
    
            var komenatarParameter = komenatar != null ?
                new ObjectParameter("komenatar", komenatar) :
                new ObjectParameter("komenatar", typeof(string));
    
            var pdvParameter = pdv.HasValue ?
                new ObjectParameter("Pdv", pdv) :
                new ObjectParameter("Pdv", typeof(double));
    
            var ukupnoParameter = ukupno.HasValue ?
                new ObjectParameter("ukupno", ukupno) :
                new ObjectParameter("ukupno", typeof(double));
    
            var nacinisporukeParameter = nacinisporuke != null ?
                new ObjectParameter("nacinisporuke", nacinisporuke) :
                new ObjectParameter("nacinisporuke", typeof(string));
    
            var datumFaParameter = datumFa.HasValue ?
                new ObjectParameter("datumFa", datumFa) :
                new ObjectParameter("datumFa", typeof(System.DateTime));
    
            var datumIParameter = datumI.HasValue ?
                new ObjectParameter("datumI", datumI) :
                new ObjectParameter("datumI", typeof(System.DateTime));
    
            var placanjeParameter = placanje.HasValue ?
                new ObjectParameter("Placanje", placanje) :
                new ObjectParameter("Placanje", typeof(int));
    
            var kupacidParameter = kupacid.HasValue ?
                new ObjectParameter("kupacid", kupacid) :
                new ObjectParameter("kupacid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRacun", servisidParameter, cijenaParameter, komenatarParameter, pdvParameter, ukupnoParameter, nacinisporukeParameter, datumFaParameter, datumIParameter, placanjeParameter, kupacidParameter);
        }
    
        public virtual ObjectResult<PretragaAuta_Result2> PretragaAuta(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PretragaAuta_Result2>("PretragaAuta", nazivParameter);
        }
    
        public virtual ObjectResult<ProdajaAutaInfo_Result1> ProdajaAutaInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProdajaAutaInfo_Result1>("ProdajaAutaInfo");
        }
    
        public virtual ObjectResult<ProdajaAutaInfoU_Result2> ProdajaAutaInfoU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProdajaAutaInfoU_Result2>("ProdajaAutaInfoU");
        }
    
        public virtual ObjectResult<RAcunaiiiiia_Result> RAcunaiiiiia()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RAcunaiiiiia_Result>("RAcunaiiiiia");
        }
    
        public virtual ObjectResult<Racuni> RacunGET()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Racuni>("RacunGET");
        }
    
        public virtual ObjectResult<Racuni> RacunGET(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Racuni>("RacunGET", mergeOption);
        }
    
        public virtual ObjectResult<RacuniAuta_Result5> RacuniAuta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RacuniAuta_Result5>("RacuniAuta");
        }
    
        public virtual ObjectResult<RacuniDijelovi_Result2> RacuniDijelovi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RacuniDijelovi_Result2>("RacuniDijelovi");
        }
    
        public virtual ObjectResult<Kupci> SearchKupac(string ime, string prezime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("SearchKupac", imeParameter, prezimeParameter);
        }
    
        public virtual ObjectResult<Kupci> SearchKupac(string ime, string prezime, MergeOption mergeOption)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("SearchKupac", mergeOption, imeParameter, prezimeParameter);
        }
    
        public virtual ObjectResult<SearchVozila_Result> SearchVozila(string vozilo)
        {
            var voziloParameter = vozilo != null ?
                new ObjectParameter("vozilo", vozilo) :
                new ObjectParameter("vozilo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVozila_Result>("SearchVozila", voziloParameter);
        }
    
        public virtual ObjectResult<Modeli> SelectALLModele(string naziv, string vrstamodela)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var vrstamodelaParameter = vrstamodela != null ?
                new ObjectParameter("vrstamodela", vrstamodela) :
                new ObjectParameter("vrstamodela", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Modeli>("SelectALLModele", nazivParameter, vrstamodelaParameter);
        }
    
        public virtual ObjectResult<Modeli> SelectALLModele(string naziv, string vrstamodela, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var vrstamodelaParameter = vrstamodela != null ?
                new ObjectParameter("vrstamodela", vrstamodela) :
                new ObjectParameter("vrstamodela", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Modeli>("SelectALLModele", mergeOption, nazivParameter, vrstamodelaParameter);
        }
    
        public virtual ObjectResult<Vozila> SelectIDAuto(Nullable<int> modelId)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("SelectIDAuto", modelIdParameter);
        }
    
        public virtual ObjectResult<Vozila> SelectIDAuto(Nullable<int> modelId, MergeOption mergeOption)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("SelectIDAuto", mergeOption, modelIdParameter);
        }
    
        public virtual ObjectResult<Korisnici> SelectServis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("SelectServis");
        }
    
        public virtual ObjectResult<Korisnici> SelectServis(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("SelectServis", mergeOption);
        }
    
        public virtual int Servis_IzmjenaPassworda(Nullable<int> korisnik, string lozinkaSalt, string lozinkaHash)
        {
            var korisnikParameter = korisnik.HasValue ?
                new ObjectParameter("korisnik", korisnik) :
                new ObjectParameter("korisnik", typeof(int));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Servis_IzmjenaPassworda", korisnikParameter, lozinkaSaltParameter, lozinkaHashParameter);
        }
    
        public virtual int Servis_Update(Nullable<int> servisID, string ime, string prezime, string adresa, string telefon, string email, Nullable<bool> status, string lozinkaHash, Nullable<int> salon, string lozinkaSalt)
        {
            var servisIDParameter = servisID.HasValue ?
                new ObjectParameter("ServisID", servisID) :
                new ObjectParameter("ServisID", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var salonParameter = salon.HasValue ?
                new ObjectParameter("Salon", salon) :
                new ObjectParameter("Salon", typeof(int));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Servis_Update", servisIDParameter, imeParameter, prezimeParameter, adresaParameter, telefonParameter, emailParameter, statusParameter, lozinkaHashParameter, salonParameter, lozinkaSaltParameter);
        }
    
        public virtual int VOZILA_MODEL(Nullable<int> modelID, string naziv, Nullable<int> offset, Nullable<int> maxRows, ObjectParameter totalRows)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VOZILA_MODEL", modelIDParameter, nazivParameter, offsetParameter, maxRowsParameter, totalRows);
        }
    
        public virtual ObjectResult<Korisnici> esp_ServisSelectID(Nullable<int> servisID)
        {
            var servisIDParameter = servisID.HasValue ?
                new ObjectParameter("ServisID", servisID) :
                new ObjectParameter("ServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_ServisSelectID", servisIDParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_ServisSelectID(Nullable<int> servisID, MergeOption mergeOption)
        {
            var servisIDParameter = servisID.HasValue ?
                new ObjectParameter("ServisID", servisID) :
                new ObjectParameter("ServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_ServisSelectID", mergeOption, servisIDParameter);
        }
    
        public virtual ObjectResult<esp_select_by_Name_Result1> esp_select_by_Name(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_select_by_Name_Result1>("esp_select_by_Name", nameParameter);
        }
    
        public virtual int esp_update_status(Nullable<int> korisnik, Nullable<bool> status)
        {
            var korisnikParameter = korisnik.HasValue ?
                new ObjectParameter("korisnik", korisnik) :
                new ObjectParameter("korisnik", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_update_status", korisnikParameter, statusParameter);
        }
    
        public virtual ObjectResult<getAllKupci_Result> getAllKupci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllKupci_Result>("getAllKupci");
        }
    
        public virtual ObjectResult<getAllProdajaAuta_Result> getAllProdajaAuta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllProdajaAuta_Result>("getAllProdajaAuta");
        }
    
        public virtual ObjectResult<Korisnici> getAllServis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("getAllServis");
        }
    
        public virtual ObjectResult<Korisnici> getAllServis(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("getAllServis", mergeOption);
        }
    
        public virtual ObjectResult<Kupci> getIDKupac(Nullable<int> kupacID)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("kupacID", kupacID) :
                new ObjectParameter("kupacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("getIDKupac", kupacIDParameter);
        }
    
        public virtual ObjectResult<Kupci> getIDKupac(Nullable<int> kupacID, MergeOption mergeOption)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("kupacID", kupacID) :
                new ObjectParameter("kupacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("getIDKupac", mergeOption, kupacIDParameter);
        }
    
        public virtual ObjectResult<getRAcuniallFilter_Result> getRAcuniallFilter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRAcuniallFilter_Result>("getRAcuniallFilter");
        }
    
        public virtual ObjectResult<getRacun1_Result> getRacun1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRacun1_Result>("getRacun1");
        }
    
        public virtual ObjectResult<getRacuniStavke_Result> getRacuniStavke()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRacuniStavke_Result>("getRacuniStavke");
        }
    
        public virtual ObjectResult<getZalihe_Result> getZalihe()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getZalihe_Result>("getZalihe");
        }
    
        public virtual ObjectResult<getZaliheAuta_Result> getZaliheAuta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getZaliheAuta_Result>("getZaliheAuta");
        }
    
        public virtual ObjectResult<Nullable<decimal>> insertKorisnik(string ime, string prezime, string adresa, string telefon, string email, Nullable<bool> status, string lozinkaHash, Nullable<int> salonID, string lozinkaSalt)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var salonIDParameter = salonID.HasValue ?
                new ObjectParameter("SalonID", salonID) :
                new ObjectParameter("SalonID", typeof(int));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("insertKorisnik", imeParameter, prezimeParameter, adresaParameter, telefonParameter, emailParameter, statusParameter, lozinkaHashParameter, salonIDParameter, lozinkaSaltParameter);
        }
    
        public virtual int insertKupac(string ime, string prezime, string email, string telefon, string adresa, string lozinka)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("telefon", telefon) :
                new ObjectParameter("telefon", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("adresa", adresa) :
                new ObjectParameter("adresa", typeof(string));
    
            var lozinkaParameter = lozinka != null ?
                new ObjectParameter("lozinka", lozinka) :
                new ObjectParameter("lozinka", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertKupac", imeParameter, prezimeParameter, emailParameter, telefonParameter, adresaParameter, lozinkaParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> insertServis(string ime, string prezime, string adresa, string telefon, string email, Nullable<bool> status, string lozinkaHash, Nullable<int> salonID, string lozinkaSalt)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var salonIDParameter = salonID.HasValue ?
                new ObjectParameter("SalonID", salonID) :
                new ObjectParameter("SalonID", typeof(int));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("insertServis", imeParameter, prezimeParameter, adresaParameter, telefonParameter, emailParameter, statusParameter, lozinkaHashParameter, salonIDParameter, lozinkaSaltParameter);
        }
    
        public virtual int insertUsluge(string naziv, Nullable<double> cijena, string komentar)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var komentarParameter = komentar != null ?
                new ObjectParameter("Komentar", komentar) :
                new ObjectParameter("Komentar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertUsluge", nazivParameter, cijenaParameter, komentarParameter);
        }
    
        public virtual int insertVozilo(Nullable<int> modelID, string nAZIV, string boja, string godiste, string vrstaMotora, string emisija, byte[] slika, byte[] slikaThumb, Nullable<double> cijena, string oprema, string snagamotora, string brojsasije, string zapreminam, string bzapreminag, string duzina, string tezina, string klima, Nullable<int> brojsjedista, string pogon, Nullable<int> brojv, string opisS, string mijenjac, string potrosnja, string obrtnimoment, string sirina, string ubrzanje, string maxbrzina, Nullable<int> kolicina)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var nAZIVParameter = nAZIV != null ?
                new ObjectParameter("NAZIV", nAZIV) :
                new ObjectParameter("NAZIV", typeof(string));
    
            var bojaParameter = boja != null ?
                new ObjectParameter("Boja", boja) :
                new ObjectParameter("Boja", typeof(string));
    
            var godisteParameter = godiste != null ?
                new ObjectParameter("Godiste", godiste) :
                new ObjectParameter("Godiste", typeof(string));
    
            var vrstaMotoraParameter = vrstaMotora != null ?
                new ObjectParameter("VrstaMotora", vrstaMotora) :
                new ObjectParameter("VrstaMotora", typeof(string));
    
            var emisijaParameter = emisija != null ?
                new ObjectParameter("Emisija", emisija) :
                new ObjectParameter("Emisija", typeof(string));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("Slika", slika) :
                new ObjectParameter("Slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("SlikaThumb", slikaThumb) :
                new ObjectParameter("SlikaThumb", typeof(byte[]));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opremaParameter = oprema != null ?
                new ObjectParameter("oprema", oprema) :
                new ObjectParameter("oprema", typeof(string));
    
            var snagamotoraParameter = snagamotora != null ?
                new ObjectParameter("snagamotora", snagamotora) :
                new ObjectParameter("snagamotora", typeof(string));
    
            var brojsasijeParameter = brojsasije != null ?
                new ObjectParameter("brojsasije", brojsasije) :
                new ObjectParameter("brojsasije", typeof(string));
    
            var zapreminamParameter = zapreminam != null ?
                new ObjectParameter("zapreminam", zapreminam) :
                new ObjectParameter("zapreminam", typeof(string));
    
            var bzapreminagParameter = bzapreminag != null ?
                new ObjectParameter("bzapreminag", bzapreminag) :
                new ObjectParameter("bzapreminag", typeof(string));
    
            var duzinaParameter = duzina != null ?
                new ObjectParameter("duzina", duzina) :
                new ObjectParameter("duzina", typeof(string));
    
            var tezinaParameter = tezina != null ?
                new ObjectParameter("tezina", tezina) :
                new ObjectParameter("tezina", typeof(string));
    
            var klimaParameter = klima != null ?
                new ObjectParameter("klima", klima) :
                new ObjectParameter("klima", typeof(string));
    
            var brojsjedistaParameter = brojsjedista.HasValue ?
                new ObjectParameter("brojsjedista", brojsjedista) :
                new ObjectParameter("brojsjedista", typeof(int));
    
            var pogonParameter = pogon != null ?
                new ObjectParameter("pogon", pogon) :
                new ObjectParameter("pogon", typeof(string));
    
            var brojvParameter = brojv.HasValue ?
                new ObjectParameter("brojv", brojv) :
                new ObjectParameter("brojv", typeof(int));
    
            var opisSParameter = opisS != null ?
                new ObjectParameter("opisS", opisS) :
                new ObjectParameter("opisS", typeof(string));
    
            var mijenjacParameter = mijenjac != null ?
                new ObjectParameter("mijenjac", mijenjac) :
                new ObjectParameter("mijenjac", typeof(string));
    
            var potrosnjaParameter = potrosnja != null ?
                new ObjectParameter("potrosnja", potrosnja) :
                new ObjectParameter("potrosnja", typeof(string));
    
            var obrtnimomentParameter = obrtnimoment != null ?
                new ObjectParameter("obrtnimoment", obrtnimoment) :
                new ObjectParameter("obrtnimoment", typeof(string));
    
            var sirinaParameter = sirina != null ?
                new ObjectParameter("sirina", sirina) :
                new ObjectParameter("sirina", typeof(string));
    
            var ubrzanjeParameter = ubrzanje != null ?
                new ObjectParameter("ubrzanje", ubrzanje) :
                new ObjectParameter("ubrzanje", typeof(string));
    
            var maxbrzinaParameter = maxbrzina != null ?
                new ObjectParameter("maxbrzina", maxbrzina) :
                new ObjectParameter("maxbrzina", typeof(string));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("kolicina", kolicina) :
                new ObjectParameter("kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertVozilo", modelIDParameter, nAZIVParameter, bojaParameter, godisteParameter, vrstaMotoraParameter, emisijaParameter, slikaParameter, slikaThumbParameter, cijenaParameter, opremaParameter, snagamotoraParameter, brojsasijeParameter, zapreminamParameter, bzapreminagParameter, duzinaParameter, tezinaParameter, klimaParameter, brojsjedistaParameter, pogonParameter, brojvParameter, opisSParameter, mijenjacParameter, potrosnjaParameter, obrtnimomentParameter, sirinaParameter, ubrzanjeParameter, maxbrzinaParameter, kolicinaParameter);
        }
    
        public virtual ObjectResult<Vozila> pretragAuta(string auta)
        {
            var autaParameter = auta != null ?
                new ObjectParameter("auta", auta) :
                new ObjectParameter("auta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("pretragAuta", autaParameter);
        }
    
        public virtual ObjectResult<Vozila> pretragAuta(string auta, MergeOption mergeOption)
        {
            var autaParameter = auta != null ?
                new ObjectParameter("auta", auta) :
                new ObjectParameter("auta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("pretragAuta", mergeOption, autaParameter);
        }
    
        public virtual ObjectResult<pretragaDijelova_Result> pretragaDijelova(string dio)
        {
            var dioParameter = dio != null ?
                new ObjectParameter("dio", dio) :
                new ObjectParameter("dio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pretragaDijelova_Result>("pretragaDijelova", dioParameter);
        }
    
        public virtual ObjectResult<searchModel_Result3> searchModel(string naziv, string sifra)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("sifra", sifra) :
                new ObjectParameter("sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchModel_Result3>("searchModel", nazivParameter, sifraParameter);
        }
    
        public virtual ObjectResult<selectAllVozila_Result> selectAllVozila()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectAllVozila_Result>("selectAllVozila");
        }
    
        public virtual ObjectResult<selectIme_Result> selectIme(string imeKorisnika)
        {
            var imeKorisnikaParameter = imeKorisnika != null ?
                new ObjectParameter("ImeKorisnika", imeKorisnika) :
                new ObjectParameter("ImeKorisnika", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectIme_Result>("selectIme", imeKorisnikaParameter);
        }
    
        public virtual ObjectResult<Korisnici> selectKorisnickoIme(string imeKorisnika)
        {
            var imeKorisnikaParameter = imeKorisnika != null ?
                new ObjectParameter("ImeKorisnika", imeKorisnika) :
                new ObjectParameter("ImeKorisnika", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("selectKorisnickoIme", imeKorisnikaParameter);
        }
    
        public virtual ObjectResult<Korisnici> selectKorisnickoIme(string imeKorisnika, MergeOption mergeOption)
        {
            var imeKorisnikaParameter = imeKorisnika != null ?
                new ObjectParameter("ImeKorisnika", imeKorisnika) :
                new ObjectParameter("ImeKorisnika", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("selectKorisnickoIme", mergeOption, imeKorisnikaParameter);
        }
    
        public virtual ObjectResult<Kupci> selectKupacKorisinickoIme(string ime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("selectKupacKorisinickoIme", imeParameter);
        }
    
        public virtual ObjectResult<Kupci> selectKupacKorisinickoIme(string ime, MergeOption mergeOption)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("selectKupacKorisinickoIme", mergeOption, imeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateAuta(Nullable<int> @void, Nullable<int> kolicina)
        {
            var voidParameter = @void.HasValue ?
                new ObjectParameter("void", @void) :
                new ObjectParameter("void", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("kolicina", kolicina) :
                new ObjectParameter("kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAuta", voidParameter, kolicinaParameter);
        }
    
        public virtual int updateDijelovi(Nullable<int> dijeID, Nullable<int> zalihe)
        {
            var dijeIDParameter = dijeID.HasValue ?
                new ObjectParameter("dijeID", dijeID) :
                new ObjectParameter("dijeID", typeof(int));
    
            var zaliheParameter = zalihe.HasValue ?
                new ObjectParameter("zalihe", zalihe) :
                new ObjectParameter("zalihe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDijelovi", dijeIDParameter, zaliheParameter);
        }
    
        public virtual int InsertRacunStavke(Nullable<int> dio, Nullable<int> vozilo, Nullable<int> racun, Nullable<double> kolicina, Nullable<double> popust, Nullable<double> rabat)
        {
            var dioParameter = dio.HasValue ?
                new ObjectParameter("Dio", dio) :
                new ObjectParameter("Dio", typeof(int));
    
            var voziloParameter = vozilo.HasValue ?
                new ObjectParameter("Vozilo", vozilo) :
                new ObjectParameter("Vozilo", typeof(int));
    
            var racunParameter = racun.HasValue ?
                new ObjectParameter("Racun", racun) :
                new ObjectParameter("Racun", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(double));
    
            var popustParameter = popust.HasValue ?
                new ObjectParameter("popust", popust) :
                new ObjectParameter("popust", typeof(double));
    
            var rabatParameter = rabat.HasValue ?
                new ObjectParameter("rabat", rabat) :
                new ObjectParameter("rabat", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRacunStavke", dioParameter, voziloParameter, racunParameter, kolicinaParameter, popustParameter, rabatParameter);
        }
    
        public virtual ObjectResult<RacunSelectByDatum_Result3> RacunSelectByDatum(Nullable<System.DateTime> datumP, Nullable<System.DateTime> datumI)
        {
            var datumPParameter = datumP.HasValue ?
                new ObjectParameter("datumP", datumP) :
                new ObjectParameter("datumP", typeof(System.DateTime));
    
            var datumIParameter = datumI.HasValue ?
                new ObjectParameter("datumI", datumI) :
                new ObjectParameter("datumI", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RacunSelectByDatum_Result3>("RacunSelectByDatum", datumPParameter, datumIParameter);
        }
    
        public virtual ObjectResult<AutaALLGET_Result1> AutaALLGET()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutaALLGET_Result1>("AutaALLGET");
        }
    
        public virtual ObjectResult<Vozila> PretragaPoNazivuAuta(string naziv, string sasija)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var sasijaParameter = sasija != null ?
                new ObjectParameter("sasija", sasija) :
                new ObjectParameter("sasija", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("PretragaPoNazivuAuta", nazivParameter, sasijaParameter);
        }
    
        public virtual ObjectResult<Vozila> PretragaPoNazivuAuta(string naziv, string sasija, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var sasijaParameter = sasija != null ?
                new ObjectParameter("sasija", sasija) :
                new ObjectParameter("sasija", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("PretragaPoNazivuAuta", mergeOption, nazivParameter, sasijaParameter);
        }
    
        public virtual int deleteKorisnik(Nullable<int> korisnik)
        {
            var korisnikParameter = korisnik.HasValue ?
                new ObjectParameter("korisnik", korisnik) :
                new ObjectParameter("korisnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteKorisnik", korisnikParameter);
        }
    
        public virtual int update_statusTrue(Nullable<int> korisnik, Nullable<bool> status)
        {
            var korisnikParameter = korisnik.HasValue ?
                new ObjectParameter("korisnik", korisnik) :
                new ObjectParameter("korisnik", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_statusTrue", korisnikParameter, statusParameter);
        }
    
        public virtual int IzmjenaAuta(Nullable<int> vozID, Nullable<int> modelID, string nAZIV, string boja, string godiste, string vrstaMotora, string emisija, byte[] slika, byte[] slikaThumb, Nullable<double> cijena, string oprema, string snagamotora, string brojsasije, string zapreminam, string bzapreminag, string duzina, string tezina, string klima, Nullable<int> brojsjedista, string pogon, Nullable<int> brojv, string opisS, string mijenjac, string potrosnja, string obrtnimoment, string sirina, string ubrzanje, string maxbrzina, Nullable<int> kolicina)
        {
            var vozIDParameter = vozID.HasValue ?
                new ObjectParameter("VozID", vozID) :
                new ObjectParameter("VozID", typeof(int));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var nAZIVParameter = nAZIV != null ?
                new ObjectParameter("NAZIV", nAZIV) :
                new ObjectParameter("NAZIV", typeof(string));
    
            var bojaParameter = boja != null ?
                new ObjectParameter("Boja", boja) :
                new ObjectParameter("Boja", typeof(string));
    
            var godisteParameter = godiste != null ?
                new ObjectParameter("Godiste", godiste) :
                new ObjectParameter("Godiste", typeof(string));
    
            var vrstaMotoraParameter = vrstaMotora != null ?
                new ObjectParameter("VrstaMotora", vrstaMotora) :
                new ObjectParameter("VrstaMotora", typeof(string));
    
            var emisijaParameter = emisija != null ?
                new ObjectParameter("Emisija", emisija) :
                new ObjectParameter("Emisija", typeof(string));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("Slika", slika) :
                new ObjectParameter("Slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("SlikaThumb", slikaThumb) :
                new ObjectParameter("SlikaThumb", typeof(byte[]));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opremaParameter = oprema != null ?
                new ObjectParameter("oprema", oprema) :
                new ObjectParameter("oprema", typeof(string));
    
            var snagamotoraParameter = snagamotora != null ?
                new ObjectParameter("snagamotora", snagamotora) :
                new ObjectParameter("snagamotora", typeof(string));
    
            var brojsasijeParameter = brojsasije != null ?
                new ObjectParameter("brojsasije", brojsasije) :
                new ObjectParameter("brojsasije", typeof(string));
    
            var zapreminamParameter = zapreminam != null ?
                new ObjectParameter("zapreminam", zapreminam) :
                new ObjectParameter("zapreminam", typeof(string));
    
            var bzapreminagParameter = bzapreminag != null ?
                new ObjectParameter("bzapreminag", bzapreminag) :
                new ObjectParameter("bzapreminag", typeof(string));
    
            var duzinaParameter = duzina != null ?
                new ObjectParameter("duzina", duzina) :
                new ObjectParameter("duzina", typeof(string));
    
            var tezinaParameter = tezina != null ?
                new ObjectParameter("tezina", tezina) :
                new ObjectParameter("tezina", typeof(string));
    
            var klimaParameter = klima != null ?
                new ObjectParameter("klima", klima) :
                new ObjectParameter("klima", typeof(string));
    
            var brojsjedistaParameter = brojsjedista.HasValue ?
                new ObjectParameter("brojsjedista", brojsjedista) :
                new ObjectParameter("brojsjedista", typeof(int));
    
            var pogonParameter = pogon != null ?
                new ObjectParameter("pogon", pogon) :
                new ObjectParameter("pogon", typeof(string));
    
            var brojvParameter = brojv.HasValue ?
                new ObjectParameter("brojv", brojv) :
                new ObjectParameter("brojv", typeof(int));
    
            var opisSParameter = opisS != null ?
                new ObjectParameter("opisS", opisS) :
                new ObjectParameter("opisS", typeof(string));
    
            var mijenjacParameter = mijenjac != null ?
                new ObjectParameter("mijenjac", mijenjac) :
                new ObjectParameter("mijenjac", typeof(string));
    
            var potrosnjaParameter = potrosnja != null ?
                new ObjectParameter("potrosnja", potrosnja) :
                new ObjectParameter("potrosnja", typeof(string));
    
            var obrtnimomentParameter = obrtnimoment != null ?
                new ObjectParameter("obrtnimoment", obrtnimoment) :
                new ObjectParameter("obrtnimoment", typeof(string));
    
            var sirinaParameter = sirina != null ?
                new ObjectParameter("sirina", sirina) :
                new ObjectParameter("sirina", typeof(string));
    
            var ubrzanjeParameter = ubrzanje != null ?
                new ObjectParameter("ubrzanje", ubrzanje) :
                new ObjectParameter("ubrzanje", typeof(string));
    
            var maxbrzinaParameter = maxbrzina != null ?
                new ObjectParameter("maxbrzina", maxbrzina) :
                new ObjectParameter("maxbrzina", typeof(string));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("kolicina", kolicina) :
                new ObjectParameter("kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IzmjenaAuta", vozIDParameter, modelIDParameter, nAZIVParameter, bojaParameter, godisteParameter, vrstaMotoraParameter, emisijaParameter, slikaParameter, slikaThumbParameter, cijenaParameter, opremaParameter, snagamotoraParameter, brojsasijeParameter, zapreminamParameter, bzapreminagParameter, duzinaParameter, tezinaParameter, klimaParameter, brojsjedistaParameter, pogonParameter, brojvParameter, opisSParameter, mijenjacParameter, potrosnjaParameter, obrtnimomentParameter, sirinaParameter, ubrzanjeParameter, maxbrzinaParameter, kolicinaParameter);
        }
    
        public virtual int AutaDelete(Nullable<int> voziloid)
        {
            var voziloidParameter = voziloid.HasValue ?
                new ObjectParameter("voziloid", voziloid) :
                new ObjectParameter("voziloid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutaDelete", voziloidParameter);
        }
    
        public virtual ObjectResult<Kupci> PretragaKupaca(string ime, string prezime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("PretragaKupaca", imeParameter, prezimeParameter);
        }
    
        public virtual ObjectResult<Kupci> PretragaKupaca(string ime, string prezime, MergeOption mergeOption)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("PretragaKupaca", mergeOption, imeParameter, prezimeParameter);
        }
    
        public virtual ObjectResult<GetIDKupacRacun_Result3> GetIDKupacRacun(Nullable<int> kupacid)
        {
            var kupacidParameter = kupacid.HasValue ?
                new ObjectParameter("kupacid", kupacid) :
                new ObjectParameter("kupacid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIDKupacRacun_Result3>("GetIDKupacRacun", kupacidParameter);
        }
    
        public virtual ObjectResult<Racuni> getRAcunID(Nullable<int> racun)
        {
            var racunParameter = racun.HasValue ?
                new ObjectParameter("racun", racun) :
                new ObjectParameter("racun", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Racuni>("getRAcunID", racunParameter);
        }
    
        public virtual ObjectResult<Racuni> getRAcunID(Nullable<int> racun, MergeOption mergeOption)
        {
            var racunParameter = racun.HasValue ?
                new ObjectParameter("racun", racun) :
                new ObjectParameter("racun", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Racuni>("getRAcunID", mergeOption, racunParameter);
        }
    
        public virtual ObjectResult<Vozila> AutaID(Nullable<int> idAuta)
        {
            var idAutaParameter = idAuta.HasValue ?
                new ObjectParameter("idAuta", idAuta) :
                new ObjectParameter("idAuta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("AutaID", idAutaParameter);
        }
    
        public virtual ObjectResult<Vozila> AutaID(Nullable<int> idAuta, MergeOption mergeOption)
        {
            var idAutaParameter = idAuta.HasValue ?
                new ObjectParameter("idAuta", idAuta) :
                new ObjectParameter("idAuta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("AutaID", mergeOption, idAutaParameter);
        }
    
        public virtual int DijeloviUpdate(Nullable<int> dioid, string naziv, Nullable<int> zalihe, Nullable<double> cijena, string sifra, Nullable<int> proizvodjac, string autap, string opis)
        {
            var dioidParameter = dioid.HasValue ?
                new ObjectParameter("dioid", dioid) :
                new ObjectParameter("dioid", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var zaliheParameter = zalihe.HasValue ?
                new ObjectParameter("zalihe", zalihe) :
                new ObjectParameter("zalihe", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("cijena", cijena) :
                new ObjectParameter("cijena", typeof(double));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("sifra", sifra) :
                new ObjectParameter("sifra", typeof(string));
    
            var proizvodjacParameter = proizvodjac.HasValue ?
                new ObjectParameter("proizvodjac", proizvodjac) :
                new ObjectParameter("proizvodjac", typeof(int));
    
            var autapParameter = autap != null ?
                new ObjectParameter("autap", autap) :
                new ObjectParameter("autap", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DijeloviUpdate", dioidParameter, nazivParameter, zaliheParameter, cijenaParameter, sifraParameter, proizvodjacParameter, autapParameter, opisParameter);
        }
    
        public virtual int UpdateKupca(Nullable<int> iD, string ime, string prezime, string email, string telefon, string adresa, string lozinka)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("telefon", telefon) :
                new ObjectParameter("telefon", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("adresa", adresa) :
                new ObjectParameter("adresa", typeof(string));
    
            var lozinkaParameter = lozinka != null ?
                new ObjectParameter("lozinka", lozinka) :
                new ObjectParameter("lozinka", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateKupca", iDParameter, imeParameter, prezimeParameter, emailParameter, telefonParameter, adresaParameter, lozinkaParameter);
        }
    
        public virtual ObjectResult<Dijelovi> DijelovigetAll(Nullable<int> dioID)
        {
            var dioIDParameter = dioID.HasValue ?
                new ObjectParameter("dioID", dioID) :
                new ObjectParameter("dioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("DijelovigetAll", dioIDParameter);
        }
    
        public virtual ObjectResult<Dijelovi> DijelovigetAll(Nullable<int> dioID, MergeOption mergeOption)
        {
            var dioIDParameter = dioID.HasValue ?
                new ObjectParameter("dioID", dioID) :
                new ObjectParameter("dioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dijelovi>("DijelovigetAll", mergeOption, dioIDParameter);
        }
    
        public virtual int ProizvodjaciUpdate(Nullable<int> id, string naziv, string adresa, string telefon, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("adresa", adresa) :
                new ObjectParameter("adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("telefon", telefon) :
                new ObjectParameter("telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProizvodjaciUpdate", idParameter, nazivParameter, adresaParameter, telefonParameter, emailParameter);
        }
    
        public virtual ObjectResult<Proizvodjaci> IDProizvodjac(Nullable<int> racun)
        {
            var racunParameter = racun.HasValue ?
                new ObjectParameter("racun", racun) :
                new ObjectParameter("racun", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proizvodjaci>("IDProizvodjac", racunParameter);
        }
    
        public virtual ObjectResult<Proizvodjaci> IDProizvodjac(Nullable<int> racun, MergeOption mergeOption)
        {
            var racunParameter = racun.HasValue ?
                new ObjectParameter("racun", racun) :
                new ObjectParameter("racun", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proizvodjaci>("IDProizvodjac", mergeOption, racunParameter);
        }
    
        public virtual ObjectResult<GetProzvodjac_Result1> GetProzvodjac()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProzvodjac_Result1>("GetProzvodjac");
        }
    
        public virtual int DeleteProizvodjac(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProizvodjac", idParameter);
        }
    
        public virtual ObjectResult<Modeli> GEtIDModel(Nullable<int> modelid)
        {
            var modelidParameter = modelid.HasValue ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Modeli>("GEtIDModel", modelidParameter);
        }
    
        public virtual ObjectResult<Modeli> GEtIDModel(Nullable<int> modelid, MergeOption mergeOption)
        {
            var modelidParameter = modelid.HasValue ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Modeli>("GEtIDModel", mergeOption, modelidParameter);
        }
    
        public virtual int UpdateModel(Nullable<int> modelid, Nullable<int> proid, string naziv, string vrstamodela)
        {
            var modelidParameter = modelid.HasValue ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(int));
    
            var proidParameter = proid.HasValue ?
                new ObjectParameter("proid", proid) :
                new ObjectParameter("proid", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var vrstamodelaParameter = vrstamodela != null ?
                new ObjectParameter("vrstamodela", vrstamodela) :
                new ObjectParameter("vrstamodela", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModel", modelidParameter, proidParameter, nazivParameter, vrstamodelaParameter);
        }
    
        public virtual ObjectResult<GetModele_Result1> GetModele()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModele_Result1>("GetModele");
        }
    
        public virtual int DeleteModel(Nullable<int> modelid)
        {
            var modelidParameter = modelid.HasValue ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModel", modelidParameter);
        }
    
        public virtual ObjectResult<getRacunStavke_Result> getRacunStavke()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRacunStavke_Result>("getRacunStavke");
        }
    
        public virtual ObjectResult<GetAutaRacunStavke_Result> GetAutaRacunStavke(Nullable<int> racunid)
        {
            var racunidParameter = racunid.HasValue ?
                new ObjectParameter("racunid", racunid) :
                new ObjectParameter("racunid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAutaRacunStavke_Result>("GetAutaRacunStavke", racunidParameter);
        }
    
        public virtual ObjectResult<GetDijeloviRacunStavke_Result1> GetDijeloviRacunStavke(Nullable<int> racunid)
        {
            var racunidParameter = racunid.HasValue ?
                new ObjectParameter("racunid", racunid) :
                new ObjectParameter("racunid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDijeloviRacunStavke_Result1>("GetDijeloviRacunStavke", racunidParameter);
        }
    
        public virtual ObjectResult<getUkupno_Result2> getUkupno(Nullable<int> racunid)
        {
            var racunidParameter = racunid.HasValue ?
                new ObjectParameter("racunid", racunid) :
                new ObjectParameter("racunid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUkupno_Result2>("getUkupno", racunidParameter);
        }
    
        public virtual ObjectResult<GetAutaStavke_Result> GetAutaStavke(Nullable<int> racunid)
        {
            var racunidParameter = racunid.HasValue ?
                new ObjectParameter("racunid", racunid) :
                new ObjectParameter("racunid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAutaStavke_Result>("GetAutaStavke", racunidParameter);
        }
    
        public virtual ObjectResult<GetDijeloviStavke_Result> GetDijeloviStavke(Nullable<int> racunid)
        {
            var racunidParameter = racunid.HasValue ?
                new ObjectParameter("racunid", racunid) :
                new ObjectParameter("racunid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDijeloviStavke_Result>("GetDijeloviStavke", racunidParameter);
        }
    
        public virtual ObjectResult<KupciGEtAll_Result> KupciGEtAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KupciGEtAll_Result>("KupciGEtAll");
        }
    }
}
